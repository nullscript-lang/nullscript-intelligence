import { KeywordCategory, KeywordMapping } from "./interface";

export const KEYWORDS: KeywordMapping[] = [
  // Control Flow
  {
    nullscript: "run",
    javascript: "function",
    category: KeywordCategory.FUNCTIONS,
    description: "Function declaration keyword",
    syntax: "run functionName(params) { ... }",
    example: "run greet(name) { return `Hello, ${name}!`; }",
  },
  {
    nullscript: "return",
    javascript: "return",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Return statement",
    syntax: "return value;",
    example: "return result;",
  },
  {
    nullscript: "whatever",
    javascript: "if",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Conditional statement",
    syntax: "whatever (condition) { ... }",
    example: "whatever (age > 18) { speak.say('Adult'); }",
  },
  {
    nullscript: "otherwise",
    javascript: "else",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Else clause for conditional statements",
    syntax: "otherwise { ... }",
    example: "otherwise { speak.say('Minor'); }",
  },
  {
    nullscript: "since",
    javascript: "for",
    category: KeywordCategory.CONTROL_FLOW,
    description: "For loop",
    syntax: "since (init; condition; increment) { ... }",
    example: "since (let i = 0; i < 10; i++) { speak.say(i); }",
  },
  {
    nullscript: "when",
    javascript: "while",
    category: KeywordCategory.CONTROL_FLOW,
    description: "While loop",
    syntax: "when (condition) { ... }",
    example: "when (count > 0) { count--; }",
  },
  {
    nullscript: "switch",
    javascript: "switch",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Switch statement",
    syntax: "switch (value) { case x: ... }",
    example: "switch (day) { case 1: return 'Monday'; }",
  },
  {
    nullscript: "case",
    javascript: "case",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Case clause in switch statement",
    syntax: "case value:",
    example: "case 'red': return '#FF0000';",
  },
  {
    nullscript: "done",
    javascript: "default",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Default case in switch statement",
    syntax: "done:",
    example: "done: return 'unknown';",
  },
  {
    nullscript: "stop",
    javascript: "break",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Break statement to exit loops or switch",
    syntax: "stop;",
    example: "whatever (found) { stop; }",
  },
  {
    nullscript: "keepgoing",
    javascript: "continue",
    category: KeywordCategory.CONTROL_FLOW,
    description: "Continue statement to skip to next iteration",
    syntax: "keepgoing;",
    example: "whatever (skip) { keepgoing; }",
  },

  // Variables & Declarations
  {
    nullscript: "let",
    javascript: "let",
    category: KeywordCategory.VARIABLES,
    description: "Mutable variable declaration",
    syntax: "let variableName = value;",
    example: "let count = 0;",
  },
  {
    nullscript: "fixed",
    javascript: "const",
    category: KeywordCategory.VARIABLES,
    description: "Immutable constant declaration",
    syntax: "fixed CONSTANT_NAME = value;",
    example: "fixed PI = 3.14159;",
  },
  {
    nullscript: "var",
    javascript: "var",
    category: KeywordCategory.VARIABLES,
    description: "Variable declaration (legacy, function-scoped)",
    syntax: "var variableName = value;",
    example: "var oldStyle = 'value';",
  },

  // Modules
  {
    nullscript: "share",
    javascript: "export",
    category: KeywordCategory.MODULES,
    description: "Export statement for modules",
    syntax: "share { item1, item2 };",
    example: "share { calculateArea, PI };",
  },
  {
    nullscript: "use",
    javascript: "import",
    category: KeywordCategory.MODULES,
    description: "Import statement for modules",
    syntax: "use { item1, item2 } from 'module';",
    example: "use { fs, path } from 'node:modules';",
  },

  // Error Handling
  {
    nullscript: "test",
    javascript: "try",
    category: KeywordCategory.ERROR_HANDLING,
    description: "Try block for error handling",
    syntax: "test { ... }",
    example: "test { riskyOperation(); }",
  },
  {
    nullscript: "grab",
    javascript: "catch",
    category: KeywordCategory.ERROR_HANDLING,
    description: "Catch block for handling errors",
    syntax: "grab (error) { ... }",
    example: "grab (err) { speak.scream(err); }",
  },
  {
    nullscript: "atLast",
    javascript: "finally",
    category: KeywordCategory.ERROR_HANDLING,
    description: "Finally block that always executes",
    syntax: "atLast { ... }",
    example: "atLast { cleanup(); }",
  },
  {
    nullscript: "trigger",
    javascript: "throw",
    category: KeywordCategory.ERROR_HANDLING,
    description: "Throw an error",
    syntax: "trigger error;",
    example: "trigger fresh fail('Invalid input');",
  },

  // Object-Oriented
  {
    nullscript: "fresh",
    javascript: "new",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Create new instance of object",
    syntax: "fresh Constructor(args)",
    example: "fixed date = fresh clock();",
  },
  {
    nullscript: "self",
    javascript: "this",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Reference to current object instance",
    syntax: "self.property",
    example: "self.name = 'value';",
  },
  {
    nullscript: "parent",
    javascript: "super",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Reference to parent class",
    syntax: "parent.method()",
    example: "parent.__init__(args);",
  },
  {
    nullscript: "model",
    javascript: "class",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Class declaration",
    syntax: "model ClassName { ... }",
    example: "model User { run __init__(name) { self.name = name; } }",
  },
  {
    nullscript: "inherits",
    javascript: "extends",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Class inheritance",
    syntax: "model Child inherits Parent { ... }",
    example: "model Admin inherits User { ... }",
  },
  {
    nullscript: "__init__",
    javascript: "constructor",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Constructor method",
    syntax: "run __init__(params) { ... }",
    example: "run __init__(name) { self.name = name; }",
  },
  {
    nullscript: "forever",
    javascript: "static",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Static method or property",
    syntax: "forever method() { ... }",
    example: "forever run createDefault() { return fresh User('Anonymous'); }",
  },
  {
    nullscript: "remove",
    javascript: "delete",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Delete object property",
    syntax: "remove object.property;",
    example: "remove user.tempData;",
  },
  {
    nullscript: "getter",
    javascript: "get",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Getter method",
    syntax: "getter propertyName() { ... }",
    example: "getter fullName() { return `${self.first} ${self.last}`; }",
  },
  {
    nullscript: "setter",
    javascript: "set",
    category: KeywordCategory.OBJECT_ORIENTED,
    description: "Setter method",
    syntax: "setter propertyName(value) { ... }",
    example:
      "setter fullName(value) { [self.first, self.last] = value.split(' '); }",
  },

  // Async/Await
  {
    nullscript: "later",
    javascript: "async",
    category: KeywordCategory.ASYNC,
    description: "Async function declaration",
    syntax: "later run functionName() { ... }",
    example: "later run fetchData() { return hold pull('/api/data'); }",
  },
  {
    nullscript: "hold",
    javascript: "await",
    category: KeywordCategory.ASYNC,
    description: "Await async operation",
    syntax: "hold asyncOperation();",
    example: "fixed result = hold fetchUser(id);",
  },

  // Boolean Values
  {
    nullscript: "yes",
    javascript: "true",
    category: KeywordCategory.BOOLEAN,
    description: "Boolean true value",
    syntax: "yes",
    example: "let isActive = yes;",
  },
  {
    nullscript: "no",
    javascript: "false",
    category: KeywordCategory.BOOLEAN,
    description: "Boolean false value",
    syntax: "no",
    example: "let isDisabled = no;",
  },
  {
    nullscript: "null",
    javascript: "null",
    category: KeywordCategory.BOOLEAN,
    description: "Null value",
    syntax: "null",
    example: "let data = null;",
  },
  {
    nullscript: "undefined",
    javascript: "undefined",
    category: KeywordCategory.BOOLEAN,
    description: "Undefined value",
    syntax: "undefined",
    example: "let value = undefined;",
  },

  // Operators
  {
    nullscript: "is",
    javascript: "===",
    category: KeywordCategory.OPERATORS,
    description: "Strict equality operator",
    syntax: "a is b",
    example: "whatever (password is 'secret') { ... }",
  },
  {
    nullscript: "isnt",
    javascript: "!==",
    category: KeywordCategory.OPERATORS,
    description: "Strict inequality operator",
    syntax: "a isnt b",
    example: "whatever (status isnt 'ready') { ... }",
  },
  {
    nullscript: "more",
    javascript: ">",
    category: KeywordCategory.OPERATORS,
    description: "Greater than operator",
    syntax: "a more b",
    example: "whatever (age more 18) { ... }",
  },
  {
    nullscript: "less",
    javascript: "<",
    category: KeywordCategory.OPERATORS,
    description: "Less than operator",
    syntax: "a less b",
    example: "whatever (count less 10) { ... }",
  },
  {
    nullscript: "moreeq",
    javascript: ">=",
    category: KeywordCategory.OPERATORS,
    description: "Greater than or equal operator",
    syntax: "a moreeq b",
    example: "whatever (score moreeq 90) { ... }",
  },
  {
    nullscript: "lesseq",
    javascript: "<=",
    category: KeywordCategory.OPERATORS,
    description: "Less than or equal operator",
    syntax: "a lesseq b",
    example: "whatever (speed lesseq 55) { ... }",
  },
  {
    nullscript: "and",
    javascript: "&&",
    category: KeywordCategory.OPERATORS,
    description: "Logical AND operator",
    syntax: "a and b",
    example: "whatever (isLoggedIn and hasPermission) { ... }",
  },
  {
    nullscript: "or",
    javascript: "||",
    category: KeywordCategory.OPERATORS,
    description: "Logical OR operator",
    syntax: "a or b",
    example: "whatever (isAdmin or isOwner) { ... }",
  },
  {
    nullscript: "not",
    javascript: "!",
    category: KeywordCategory.OPERATORS,
    description: "Logical NOT operator",
    syntax: "not condition",
    example: "whatever (not isDisabled) { ... }",
  },
  {
    nullscript: "what",
    javascript: "typeof",
    category: KeywordCategory.OPERATORS,
    description: "Type checking operator",
    syntax: "what variable",
    example: "whatever (what data is 'string') { ... }",
  },
  {
    nullscript: "kind",
    javascript: "instanceof",
    category: KeywordCategory.OPERATORS,
    description: "Instance checking operator",
    syntax: "object kind Constructor",
    example: "whatever (date kind clock) { ... }",
  },
  {
    nullscript: "inside",
    javascript: "in",
    category: KeywordCategory.OPERATORS,
    description: "Property existence operator",
    syntax: "property inside object",
    example: "whatever ('name' inside user) { ... }",
  },
  {
    nullscript: "part",
    javascript: "of",
    category: KeywordCategory.OPERATORS,
    description: "For-of loop operator",
    syntax: "since (item part collection) { ... }",
    example: "since (user part users) { speak.say(user.name); }",
  },

  // Console Methods
  {
    nullscript: "speak",
    javascript: "console",
    category: KeywordCategory.CONSOLE,
    description: "Console object for output",
    syntax: "speak.method()",
    example: "speak.say('Hello World!');",
  },
  {
    nullscript: "say",
    javascript: "log",
    category: KeywordCategory.CONSOLE,
    description: "Console log method",
    syntax: "speak.say(message)",
    example: "speak.say('Debug info:', data);",
  },
  {
    nullscript: "yell",
    javascript: "warn",
    category: KeywordCategory.CONSOLE,
    description: "Console warning method",
    syntax: "speak.yell(warning)",
    example: "speak.yell('Deprecated function used');",
  },
  {
    nullscript: "scream",
    javascript: "error",
    category: KeywordCategory.CONSOLE,
    description: "Console error method",
    syntax: "speak.scream(error)",
    example: "speak.scream('Something went wrong!');",
  },
  {
    nullscript: "whisper",
    javascript: "info",
    category: KeywordCategory.CONSOLE,
    description: "Console info method",
    syntax: "speak.whisper(info)",
    example: "speak.whisper('Process started');",
  },
  {
    nullscript: "peek",
    javascript: "debug",
    category: KeywordCategory.CONSOLE,
    description: "Console debug method",
    syntax: "speak.peek(debug)",
    example: "speak.peek('Debug details:', object);",
  },
  {
    nullscript: "check",
    javascript: "assert",
    category: KeywordCategory.CONSOLE,
    description: "Console assertion method",
    syntax: "speak.check(condition, message)",
    example: "speak.check(user.id, 'User must have ID');",
  },
  {
    nullscript: "wipe",
    javascript: "clear",
    category: KeywordCategory.CONSOLE,
    description: "Clear console",
    syntax: "speak.wipe()",
    example: "speak.wipe(); // Clear console",
  },
  {
    nullscript: "show",
    javascript: "table",
    category: KeywordCategory.CONSOLE,
    description: "Display data as table",
    syntax: "speak.show(data)",
    example: "speak.show(users); // Display as table",
  },
  {
    nullscript: "group",
    javascript: "group",
    category: KeywordCategory.CONSOLE,
    description: "Group console messages",
    syntax: "speak.group(label)",
    example: "speak.group('User Operations');",
  },
  {
    nullscript: "ungroup",
    javascript: "groupEnd",
    category: KeywordCategory.CONSOLE,
    description: "End console group",
    syntax: "speak.ungroup()",
    example: "speak.ungroup(); // End current group",
  },

  // Global Objects
  {
    nullscript: "thing",
    javascript: "Object",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Object constructor",
    syntax: "thing.method() or fresh thing()",
    example: "fixed keys = thing.keys(user);",
  },
  {
    nullscript: "list",
    javascript: "Array",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Array constructor",
    syntax: "fresh list() or list.method()",
    example: "fixed numbers = fresh list(1, 2, 3);",
  },
  {
    nullscript: "text",
    javascript: "String",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "String constructor",
    syntax: "fresh text() or text.method()",
    example: "fixed str = fresh text('hello');",
  },
  {
    nullscript: "num",
    javascript: "Number",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Number constructor",
    syntax: "fresh num() or num.method()",
    example: "fixed parsed = num.parseInt('42');",
  },
  {
    nullscript: "bool",
    javascript: "Boolean",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Boolean constructor",
    syntax: "fresh bool() or bool.method()",
    example: "fixed boolVal = fresh bool(1);",
  },
  {
    nullscript: "clock",
    javascript: "Date",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Date constructor",
    syntax: "fresh clock() or clock.method()",
    example: "fixed now = fresh clock();",
  },
  {
    nullscript: "maths",
    javascript: "Math",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Math object",
    syntax: "maths.method()",
    example: "fixed rounded = maths.round(3.7);",
  },
  {
    nullscript: "json",
    javascript: "JSON",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "JSON object",
    syntax: "json.method()",
    example: "fixed parsed = json.parse(jsonString);",
  },
  {
    nullscript: "pattern",
    javascript: "RegExp",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Regular expression constructor",
    syntax: "fresh pattern(regex) or pattern.method()",
    example: "fixed regex = fresh pattern('[0-9]+');",
  },
  {
    nullscript: "fail",
    javascript: "Error",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Error constructor",
    syntax: "fresh fail(message)",
    example: "trigger fresh fail('Something went wrong');",
  },
  {
    nullscript: "promise",
    javascript: "Promise",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Promise constructor",
    syntax: "fresh promise((resolve, reject) => {})",
    example: "fixed p = fresh promise((resolve) => resolve(42));",
  },
  {
    nullscript: "dict",
    javascript: "Map",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Map constructor",
    syntax: "fresh dict()",
    example: "fixed map = fresh dict([['key', 'value']]);",
  },
  {
    nullscript: "unique",
    javascript: "Set",
    category: KeywordCategory.GLOBAL_OBJECTS,
    description: "Set constructor",
    syntax: "fresh unique()",
    example: "fixed set = fresh unique([1, 2, 3]);",
  },

  // Global Functions
  {
    nullscript: "toint",
    javascript: "parseInt",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Parse string to integer",
    syntax: "toint(string, radix)",
    example: "fixed number = toint('42', 10);",
  },
  {
    nullscript: "tofloat",
    javascript: "parseFloat",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Parse string to float",
    syntax: "tofloat(string)",
    example: "fixed decimal = tofloat('3.14');",
  },
  {
    nullscript: "isnan",
    javascript: "isNaN",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Check if value is NaN",
    syntax: "isnan(value)",
    example: "whatever (isnan(result)) { speak.scream('Invalid number'); }",
  },
  {
    nullscript: "isfinite",
    javascript: "isFinite",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Check if value is finite",
    syntax: "isfinite(value)",
    example: "whatever (isfinite(number)) { processNumber(number); }",
  },
  {
    nullscript: "runcode",
    javascript: "eval",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Execute code from string (dangerous)",
    syntax: "runcode(codeString)",
    example: "fixed result = runcode('2 + 2'); // Use with caution!",
  },
  {
    nullscript: "pull",
    javascript: "fetch",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Fetch data from URL",
    syntax: "pull(url, options)",
    example: "fixed response = hold pull('/api/users');",
  },
  {
    nullscript: "need",
    javascript: "require",
    category: KeywordCategory.GLOBAL_FUNCTIONS,
    description: "Require module (Node.js)",
    syntax: "need(moduleName)",
    example: "fixed fs = need('fs');",
  },

  // Timing Functions
  {
    nullscript: "delay",
    javascript: "setTimeout",
    category: KeywordCategory.TIMING,
    description: "Execute function after delay",
    syntax: "delay(function, milliseconds)",
    example: "delay(() => speak.say('Hello'), 1000);",
  },
  {
    nullscript: "repeat",
    javascript: "setInterval",
    category: KeywordCategory.TIMING,
    description: "Execute function repeatedly",
    syntax: "repeat(function, milliseconds)",
    example: "fixed timer = repeat(() => updateClock(), 1000);",
  },
  {
    nullscript: "stopdelay",
    javascript: "clearTimeout",
    category: KeywordCategory.TIMING,
    description: "Cancel timeout",
    syntax: "stopdelay(timeoutId)",
    example: "stopdelay(delayId);",
  },
  {
    nullscript: "stoprepeat",
    javascript: "clearInterval",
    category: KeywordCategory.TIMING,
    description: "Cancel interval",
    syntax: "stoprepeat(intervalId)",
    example: "stoprepeat(timerId);",
  },

  // Utility
  {
    nullscript: "nothing",
    javascript: "void",
    category: KeywordCategory.UTILITY,
    description: "Void operator",
    syntax: "nothing expression",
    example: "nothing functionCall(); // Return undefined",
  },
  {
    nullscript: "using",
    javascript: "with",
    category: KeywordCategory.UTILITY,
    description: "With statement (not recommended)",
    syntax: "using (object) { ... }",
    example: "using (user) { speak.say(name); } // Avoid using",
  },
  {
    nullscript: "freeze",
    javascript: "debugger",
    category: KeywordCategory.UTILITY,
    description: "Debugger breakpoint",
    syntax: "freeze;",
    example: "freeze; // Pause execution in debugger",
  },
  {
    nullscript: "pause",
    javascript: "yield",
    category: KeywordCategory.UTILITY,
    description: "Yield in generator function",
    syntax: "pause value;",
    example: "pause nextValue; // In generator function",
  },
];

export const KEYWORDS_BY_CATEGORY: Record<KeywordCategory, KeywordMapping[]> = {
  [KeywordCategory.CONTROL_FLOW]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.CONTROL_FLOW,
  ),
  [KeywordCategory.VARIABLES]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.VARIABLES,
  ),
  [KeywordCategory.FUNCTIONS]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.FUNCTIONS,
  ),
  [KeywordCategory.OPERATORS]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.OPERATORS,
  ),
  [KeywordCategory.TYPES]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.TYPES,
  ),
  [KeywordCategory.CONSOLE]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.CONSOLE,
  ),
  [KeywordCategory.GLOBAL_OBJECTS]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.GLOBAL_OBJECTS,
  ),
  [KeywordCategory.GLOBAL_FUNCTIONS]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.GLOBAL_FUNCTIONS,
  ),
  [KeywordCategory.TIMING]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.TIMING,
  ),
  [KeywordCategory.BOOLEAN]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.BOOLEAN,
  ),
  [KeywordCategory.MODULES]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.MODULES,
  ),
  [KeywordCategory.ERROR_HANDLING]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.ERROR_HANDLING,
  ),
  [KeywordCategory.OBJECT_ORIENTED]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.OBJECT_ORIENTED,
  ),
  [KeywordCategory.ASYNC]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.ASYNC,
  ),
  [KeywordCategory.UTILITY]: KEYWORDS.filter(
    (k) => k.category === KeywordCategory.UTILITY,
  ),
};

export const KEYWORD_LOOKUP: Record<string, KeywordMapping> = {};
export const JS_TO_NULLSCRIPT: Record<string, string> = {};
export const NULLSCRIPT_TO_JS: Record<string, string> = {};

KEYWORDS.forEach((mapping) => {
  KEYWORD_LOOKUP[mapping.nullscript] = mapping;
  JS_TO_NULLSCRIPT[mapping.javascript] = mapping.nullscript;
  NULLSCRIPT_TO_JS[mapping.nullscript] = mapping.javascript;
});

export const FORBIDDEN_KEYWORDS = [
  "interface",
  "enum",
  "abstract",
  "implements",
  "public",
  "private",
  "protected",
  "readonly",
  "generator",
  "Partial",
  "Required",
  "Readonly",
  "Record",
  "Pick",
  "Omit",
  "Exclude",
  "Extract",
  "NonNullable",
  "ReturnType",
  "InstanceType",
  "Parameters",
  "ConstructorParameters",
  "ThisType",
  "decorator",
  "metadata",
  "reflect",
  "namespace",
  "declare",
  "ambient",
  "satisfies",
  "asserts",
  "infer",
  "keyof",
  "out",
];

export const INVALID_SYNTAX = [
  ": string",
  ": number",
  ": boolean",
  ": any",
  ": void",
  ": never",
  ": unknown",
  ": object",
  ": array",
  ": tuple",
  ": union",
  ": String",
  ": Number",
  ": Boolean",
  ": Any",
  ": Void",
  ": Never",
  ": Unknown",
  ": Object",
  ": Array",
  ": Tuple",
  ": Union",
  "<T>",
  "<string>",
  "<number>",
  "<boolean>",
  "<any>",
  "extends T",
  "implements I",
  "infer U",
  "as string",
  "as number",
  "as boolean",
  "as any",
  "satisfies T",
  "asserts T",
  "const T",
  "interface",
  "enum",
  "namespace",
  "@decorator",
  "@Component",
  "@Injectable",
  "@Input",
  "@Output",
];
